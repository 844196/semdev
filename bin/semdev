#!/usr/bin/env node

const cli = require('cac')();
const signale = require('signale');
const { PrepareCommand } = require('../build/app/command/prepare');
const { PrepareNextVersion } = require('../build/core/use-case/prepare-next-version');
const { PrepareNextVersionAdapter } = require('../build/app/adapter/prepare-next-version-adapter');
const simpleGit = require('simple-git/promise');
const { ReleaseCommand } = require('../build/app/command/release');
const { ReleaseVersion } = require('../build/core/use-case/release-version');
const { ReleaseVersionAdapter } = require('../build/app/adapter/release-version-adapter');

const run = (cmd) => async (...args) =>
  cmd
    .run(...args)
    .run()
    .then((result) => {
      if (result.isLeft()) {
        return Promise.reject(result.value);
      }
      process.exit(0);
    })
    .catch((err) => {
      signale.error(err);
      process.exit(1);
    });

const config = {
  versionPrefix: 'v',
  branchPrefix: 'release/',
  masterBranch: 'master',
};

cli
  .command('prepare <major|minor|patch|new-version>', 'Prepare for next version development')
  .option('--verbose', 'Print progress messages', { default: false })
  .example((me) => `${me} prepare major`)
  .example((me) => `${me} prepare v1.2.3`)
  .action((releaseTypeOrVersion, { verbose }) => {
    const useCaseAdapter = new PrepareNextVersionAdapter(
      config,
      simpleGit().silent(true),
      verbose ? signale : { info: () => undefined, success: signale.success },
    );
    const useCase = new PrepareNextVersion(useCaseAdapter);
    run(new PrepareCommand(useCase))(releaseTypeOrVersion);
  });

cli
  .command('release <version>', 'Merge version development branch & create tag')
  .example((me) => `${me} merge v1.2.3`)
  .action((version) => {
    const useCaseAdapter = new ReleaseVersionAdapter(
      config,
      simpleGit().silent(true),
      { success: signale.success },
    );
    const useCase = new ReleaseVersion(useCaseAdapter);
    run(new ReleaseCommand(useCase))(version);
  });

cli.on('command:*', () => {
  signale.error(`unknown sub command: ${cli.args.join(' ')}`);
  process.exit(1);
});

cli
  .version('0.0.0')
  .help()
  .parse();
