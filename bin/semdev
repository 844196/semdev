#!/usr/bin/env node

const cli = require('cac')();
const cosmiconfig = require('cosmiconfig');
const signale = require('signale');
const simpleGit = require('simple-git/promise');
const { defaultConfig } = require('../build/app/config');
const { PrepareCommand } = require('../build/app/command/prepare');
const { ReleaseCommand } = require('../build/app/command/release');

const found = cosmiconfig('semdev').searchSync();
const config = found ? found.config : defaultConfig;

const git = simpleGit().silent(true);

cli
  .command('prepare <major|minor|patch|new-version>', 'Prepare for next version development')
  .option('--verbose', 'Print progress messages', { default: false })
  .example((me) => `${me} prepare major`)
  .example((me) => `${me} prepare v1.2.3`)
  .action(() =>
    new PrepareCommand({ config, logger: signale, git }).run(...[cli.options, ...cli.args]).then(process.exit),
  );

cli
  .command('release <version>', 'Merge version development branch & create tag')
  .example((me) => `${me} merge v1.2.3`)
  .action(() =>
    new ReleaseCommand({ config, logger: signale, git }).run(...[cli.options, ...cli.args]).then(process.exit),
  );

cli.on('command:*', () => {
  signale.error(`unknown sub command: ${cli.args.join(' ')}`);
  process.exit(1);
});

cli
  .version('0.0.0')
  .help()
  .parse();
