#!/usr/bin/env node

const cli = require('cac')();
const signale = require('signale');
const { PrepareCommand } = require('../build/app/command/prepare');
const { PrepareNextVersion } = require('../build/core/use-case/prepare-next-version');
const { PrepareNextVersionAdapter } = require('../build/app/adapter/prepare-next-version-adapter');
const simpleGit = require('simple-git/promise');

const run = (cmd) => async (...args) =>
  cmd
    .run(...args)
    .run()
    .then((result) => {
      if (result.isLeft()) {
        return Promise.reject(result.value);
      }
      process.exit(0);
    })
    .catch((err) => {
      signale.error(err);
      process.exit(1);
    });

const config = {
  versionPrefix: 'v',
  branchPrefix: 'release/',
  mainStreamBranch: 'master',
};

cli
  .command('prepare <major|minor|patch>', 'Prepare for next version development')
  .option('--verbose', 'Print progress messages', { default: false })
  .action((releaseType, { verbose }) => {
    const useCaseAdapter = new PrepareNextVersionAdapter(
      config,
      simpleGit().silent(true),
      verbose ? signale : { info: () => undefined, success: signale.success },
    );
    const useCase = new PrepareNextVersion(useCaseAdapter);
    run(new PrepareCommand(useCase))(releaseType);
  });

cli.on('command:*', () => {
  signale.error(`unknown sub command: ${cli.args.join(' ')}`);
  process.exit(1);
});

cli
  .version('0.0.0')
  .help()
  .parse();
